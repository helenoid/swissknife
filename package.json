{
  "name": "swissknife",
  "version": "0.0.53",
  "bin": {
    "swissknife": "cli.mjs",
    "kode": "cli.mjs"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "type": "module",
  "author": "Benjamin Barber <starworks5@gmail.com>",
  "license": "",
  "description": "Use swissknife, an AI assistant, right from your terminal. swissknife can understand your codebase, edit files, run terminal commands, and handle entire workflows for you.",
  "homepage": "https://github.com/endomorphosis/swissknife",
  "repository": {
    "type": "git",
    "url": "https://github.com/endomorphosis/swissknife.git"
  },
  "bugs": {
    "url": "https://github.com/endomorphosis/swissknife/issues"
  },
  "files": [
    "cli.mjs",
    "yoga.wasm",
    "install.sh"
  ],
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "build:cli": "vite build --config vite.cli.config.ts",
    "build:web": "vite build --config vite.web.config.ts",
    "build:ipfs": "vite build --config vite.ipfs.config.ts",
    "build:collaborative": "vite build --config vite.web.config.ts --mode collaborative",
    "build:workers": "vite build --config vite.workers.config.ts",
    "build:all": "npm run build:cli && npm run build:web && npm run build:ipfs && npm run build:workers",
    "desktop": "vite dev --config vite.web.config.ts",
    "desktop:collaborative": "vite dev --config vite.web.config.ts --mode collaborative",
    "desktop:distributed": "vite dev --config vite.web.config.ts --mode distributed",
    "desktop:file-sharing": "vite dev --config vite.web.config.ts --mode file-sharing",
    "desktop:cloudflare": "vite dev --config vite.web.config.ts --mode cloudflare",
    "desktop:hybrid": "vite dev --config vite.web.config.ts --mode hybrid",
    "dev:collaborative": "vite dev --config vite.web.config.ts --mode collaborative --open",
    "virtual-desktop": "vite dev --config vite.web.config.ts",
    "webgui": "vite dev --config vite.web.config.ts",
    "test": "npx jest test/unit/utils/array.test.ts test/unit/utils/json.test.ts test/unit/models/model.test.ts test/unit/models/provider.test.ts test/unit/utils/array-debug.test.ts test/unit/utils/array-simple.test.js test/unit/utils/json-simple.test.js test/unit/utils/json.test.js test/unit/utils/string.test.ts test/unit/utils/object.test.ts test/unit/utils/validation.test.ts test/unit/ai/agent-simple.test.ts test/unit/config/config-simple.test.ts test/unit/tasks/task-simple.test.ts test/unit/models/execution-service-fixed.test.ts test/unit/commands/help-generator-fixed.test.ts test/unit/commands/cli/command-parser-fixed.test.ts test/unit/ai/models/openai-model-fixed.test.ts --config=config/jest/jest.config.cjs --testTimeout=15000",
    "test:run": "vitest run",
    "test:cli": "vitest run --workspace cli",
    "test:web": "vitest run --workspace web",
    "test:ipfs": "vitest run --workspace ipfs",
    "test:browser": "vitest run --browser",
    "test:ai-inference": "vitest run --workspace ipfs --browser",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage --config=config/jest/config/jest/jest.hybrid.config.cjs --maxWorkers=1",
    "test:integration": "jest test/integration --config=config/jest/jest.config.cjs",
    "test:vite": "vitest run test/integration/vite-integration.test.ts test/integration/monorepo.test.ts test/browser/ai-inference.test.ts test/browser/webgpu-inference.test.ts",
    "test:collaborative": "vitest run test/collaborative --browser",
    "test:p2p": "vitest run test/p2p --browser",
    "test:workers": "vitest run test/workers --browser",
    "test:production": "npm run test:vite && npm run test:collaborative && npm run test:p2p",
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "typecheck": "tsc --noEmit && tsc --noEmit -p web/tsconfig.json && tsc --noEmit -p ipfs_accelerate_js/tsconfig.json",
    "clean": "rm -rf dist web/dist ipfs_accelerate_js/dist node_modules/.vite",
    "preview": "vite preview",
    "serve:web": "vite preview --config vite.web.config.ts",
    "dev:cli": "tsx src/entrypoints/cli.tsx --verbose",
    "dev:web": "vite dev --config vite.web.config.ts",
    "dev:ipfs": "vite dev --config vite.ipfs.config.ts",
    "dev:collaborative-alt": "vite dev --config vite.web.config.ts --mode collaborative",
    "test:working": "npx jest test/unit/utils/array.test.ts test/unit/utils/json.test.ts test/unit/models/model.test.ts test/unit/models/provider.test.ts test/unit/utils/array-debug.test.ts test/unit/utils/array-simple.test.js test/unit/utils/json-simple.test.js test/unit/utils/json.test.js --config=config/jest/jest.config.cjs --testTimeout=15000",
    "test:hybrid": "jest --config=config/jest/jest.hybrid.config.cjs",
    "test:ci-safe": "jest --config=config/jest/jest.hybrid.config.cjs --ci --coverage --maxWorkers=1",
    "test:unit": "jest test/unit --config=config/jest/jest.config.cjs",
    "test:e2e": "jest test/e2e --config=config/jest/jest.config.cjs",
    "test:benchmark": "jest test/benchmark --config=config/jest/config/jest/jest.config.cjs",
    "test:ci": "jest --ci --coverage --reporters=default --reporters=jest-junit --config=config/jest/config/jest/jest.config.cjs",
    "test:verify-build": "node ./test/verify-build.js",
    "test:staging": "jest test/e2e --config jest.staging.config.js",
    "test:phase1": "jest test/unit/phase1 test/integration/phase1 --config=config/jest/config/jest/jest.config.cjs",
    "test:phase2": "jest test/unit/phase2 test/integration/phase2 --config=config/jest/config/jest/jest.config.cjs",
    "test:phase3": "jest test/unit/phase3 test/integration/phase3 --config=config/jest/config/jest/jest.config.cjs",
    "test:phase4": "jest test/unit/phase4 test/integration/phase4 --config=config/jest/config/jest/jest.config.cjs",
    "test:phase5": "jest test/unit/performance test/unit/release test/unit/testing test/unit/documentation test/unit/ux test/unit/cli/performanceCommand.test.ts test/unit/cli/releaseCommand.test.ts test/integration/phase5.test.ts --config=config/jest/config/jest/jest.config.cjs",
    "test:all-phases": "npm run test:phase1 && npm run test:phase2 && npm run test:phase3 && npm run test:phase4 && npm run test:phase5",
    "test:e2e:all-phases": "jest test/e2e/all-phases.test.js",
    "test:benchmark:phase1": "jest test/benchmark/phase1.benchmark.ts",
    "test:benchmark:phase2": "jest test/benchmark/phase2.benchmark.ts",
    "test:benchmark:phase3": "jest test/benchmark/phase3.benchmark.ts",
    "test:benchmark:phase4": "jest test/benchmark/phase4.benchmark.ts",
    "test:benchmark:phase5": "jest test/benchmark/phase5.benchmark.ts",
    "test:benchmark:all": "npm run test:benchmark:phase1 && npm run test:benchmark:phase2 && npm run test:benchmark:phase3 && npm run test:benchmark:phase4 && npm run test:benchmark:phase5",
    "test:platform": "jest test/e2e/platform-specific.test.js",
    "test:trace": "jest test/unit/tasknet/trace-based.test.ts",
    "benchmark:compare": "node scripts/benchmark-compare.js",
    "benchmark:collect": "node test/benchmark/collect-results.js > benchmark-results/latest.json",
    "config:init": "node --import tsx src/config/init.ts",
    "config:staging": "node ./scripts/configure.js staging",
    "config:production": "node ./scripts/configure.js production",
    "deploy:staging": "node ./scripts/deploy.js staging",
    "deploy:production": "node ./scripts/deploy.js production",
    "phase1": "tsx ./src/cli-phase1.ts",
    "phase1:help": "tsx ./src/cli-phase1.ts help",
    "phase1:version": "tsx ./src/cli-phase1.ts version",
    "phase1:config": "tsx ./src/cli-phase1.ts config",
    "phase1:bridge": "tsx ./src/cli-phase1.ts bridge",
    "web:build": "webpack --config web/webpack.browser.config.js --mode production",
    "web:dev": "webpack --config web/webpack.browser.config.js --mode development --watch",
    "web:serve": "webpack serve --config web/webpack.browser.config.js --mode development",
    "web:analyze": "webpack-bundle-analyzer web/dist/main.js",
    "preversion": "npm run test",
    "postversion": "git push && git push --tags",
    "prepublishOnly": "npm run test && npm run build",
    "build:docker": "docker build -t swissknife:latest .",
    "optimize": "npm run build:all && npm run analyze",
    "analyze": "npx vite-bundle-analyzer dist",
    "security-audit": "npm audit && npx audit-ci",
    "performance-test": "npx lighthouse http://localhost:3001 --output=json --output-path=./performance-report.json",
    "test:production-full": "npm run test:e2e && npm run test:performance && npm run test:security",
    "test:e2e:playwright": "npx playwright test",
    "test:performance": "jest test/performance --config=config/jest/jest.config.cjs",
    "test:security": "npx snyk test",
    "docs:generate": "mkdir -p docs/api && echo '# SwissKnife API Documentation' > docs/api/README.md && echo 'API documentation will be generated here.' >> docs/api/README.md",
    "docs:deploy": "npm run docs:generate && gh-pages -d docs",
    "docs:api": "npx typedoc src --out docs/api --theme minimal",
    "docs:user-guide": "npx markdown-to-html README.md > docs/user-guide.html",
    "release:prepare": "npm run test:production && npm run build:all && npm run security-audit",
    "release:publish": "npm run release:prepare && npm publish",
    "docker:build": "docker build -t swissknife:latest -f Dockerfile .",
    "docker:run": "docker run -p 3001:3001 swissknife:latest",
    "docker:push": "docker tag swissknife:latest hallucinate-llc/swissknife:latest && docker push hallucinate-llc/swissknife:latest"
  },
  "optionalDependencies": {
    "@img/sharp-darwin-arm64": "^0.33.5",
    "@img/sharp-linux-arm": "^0.33.5",
    "@img/sharp-linux-x64": "^0.33.5",
    "@img/sharp-win32-x64": "^0.33.5"
  },
  "dependencies": {
    "@anthropic-ai/bedrock-sdk": "^0.12.4",
    "@anthropic-ai/claude-code": "^0.2.29",
    "@anthropic-ai/sdk": "^0.39.0",
    "@anthropic-ai/vertex-sdk": "^0.7.0",
    "@commander-js/extra-typings": "^12.0.0",
    "@iarna/toml": "^2.2.5",
    "@inkjs/ui": "^2.0.0",
    "@modelcontextprotocol/sdk": "^1.12.1",
    "@multiformats/multiaddr": "^12.1.14",
    "@sentry/node": "^9.3.0",
    "@statsig/js-client": "^3.12.2",
    "@types/lodash-es": "^4.17.12",
    "ansi-colors": "^4.1.3",
    "ansi-escapes": "^7.0.0",
    "assert": "^2.1.0",
    "buffer": "^6.0.3",
    "chalk": "^4.1.2",
    "cli-highlight": "^2.1.11",
    "cli-table3": "^0.6.5",
    "commander": "^12.0.0",
    "constants-browserify": "^1.0.0",
    "crypto-browserify": "^3.12.1",
    "debug": "^4.4.0",
    "diff": "^7.0.0",
    "dotenv": "^16.4.7",
    "env-paths": "^3.0.0",
    "figures": "^6.1.0",
    "glob": "^11.0.1",
    "highlight.js": "^11.11.1",
    "https-proxy-agent": "^7.0.6",
    "ink": "^5.2.1",
    "ink-link": "^4.1.0",
    "ink-testing-library": "^4.0.0",
    "jest-cli": "^30.0.0-beta.3",
    "kleur": "^4.1.5",
    "libp2p": "^1.2.1",
    "lodash-es": "^4.17.21",
    "lru-cache": "^11.0.2",
    "marked": "^15.0.7",
    "minimist": "^1.2.8",
    "nanoid": "^5.1.2",
    "openai": "^4.86.1",
    "ora": "^8.2.0",
    "os-browserify": "^0.3.0",
    "path-browserify": "^1.0.1",
    "process": "^0.11.10",
    "querystring-es3": "^0.2.1",
    "react": "18.3.1",
    "react-test-renderer": "^18.3.1",
    "semver": "^7.7.1",
    "shell-quote": "^1.8.2",
    "sinon": "^20.0.0",
    "spawn-rx": "^5.1.2",
    "stream-browserify": "^3.0.0",
    "ts-node": "^10.9.2",
    "undici": "^7.4.0",
    "url": "^0.11.4",
    "util": "^0.12.5",
    "uuid": "^11.1.0",
    "wrap-ansi": "^9.0.0",
    "zod": "^3.24.2",
    "zod-to-json-schema": "^3.24.3"
  },
  "devDependencies": {
    "@babel/core": "^7.17.0",
    "@babel/plugin-proposal-class-properties": "^7.18.6",
    "@babel/plugin-transform-class-properties": "^7.27.1",
    "@babel/plugin-transform-private-methods": "^7.27.1",
    "@babel/plugin-transform-runtime": "^7.27.4",
    "@babel/preset-env": "^7.16.0",
    "@babel/preset-react": "^7.27.1",
    "@babel/preset-typescript": "^7.27.1",
    "@babel/runtime": "^7.17.0",
    "@jest/globals": "^27.5.1",
    "@lhci/cli": "^0.12.0",
    "@playwright/test": "^1.55.0",
    "@types/chai": "^5.2.2",
    "@types/diff": "^7.0.2",
    "@types/ink": "^0.5.2",
    "@types/ink-testing-library": "^1.0.4",
    "@types/jest": "^29.5.12",
    "@types/minimist": "^1.2.5",
    "@types/node": "^24.3.0",
    "@types/ora": "^3.1.0",
    "@types/react": "^18.3.23",
    "@types/sharp": "^0.31.1",
    "@types/sinon": "^17.0.4",
    "@types/testing-library__react": "^10.0.1",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "@vitejs/plugin-legacy": "^7.2.1",
    "@vitest/browser": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "ajv": "^8.17.1",
    "audit-ci": "^7.0.0",
    "axios": "^1.8.4",
    "babel-jest": "^27.5.1",
    "babel-plugin-module-resolver": "^5.0.2",
    "chai": "^5.2.0",
    "copy-webpack-plugin": "^12.0.2",
    "css-loader": "^7.1.2",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-jest": "^27.9.0",
    "eslint-plugin-react": "^7.34.1",
    "gh-pages": "^6.0.0",
    "happy-dom": "^18.0.1",
    "html-webpack-plugin": "^5.6.3",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-node": "^27.5.1",
    "jest-junit": "^16.0.0",
    "jest-watch-typeahead": "^2.2.2",
    "lodash": "^4.17.21",
    "markdown-to-html": "^0.0.13",
    "merkletreejs": "^0.5.2",
    "mini-css-extract-plugin": "^2.9.2",
    "playwright": "^1.55.0",
    "prettier": "^3.5.3",
    "react-devtools-core": "^6.1.1",
    "snyk": "^1.1286.0",
    "style-loader": "^4.0.0",
    "terser": "^5.43.1",
    "terser-webpack-plugin": "^5.3.11",
    "toml": "^3.0.0",
    "ts-jest": "^29.4.1",
    "ts-jest-resolver": "^2.0.1",
    "ts-loader": "^9.5.1",
    "tsx": "^4.19.3",
    "typedoc": "^0.25.12",
    "typedoc-plugin-markdown": "^4.0.0",
    "typedoc-plugin-merge-modules": "^5.1.0",
    "typescript": "^4.9.5",
    "vite": "^7.1.3",
    "vite-bundle-analyzer": "^0.7.0",
    "vitest": "^3.2.4",
    "webpack": "^5.96.1",
    "webpack-bundle-analyzer": "^4.10.2",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.2.1"
  },
  "packageManager": "yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e"
}
